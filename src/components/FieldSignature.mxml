<?xml version="1.0" encoding="utf-8"?>
<components:Field xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
		 width="200" height="36" creationComplete="init()" click="select()"
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
        import fieldSettingsDialogs.signatureSettings;
        import helpers.Layer;
        import helpers.FieldsManager;

        use namespace mx_internal;


        [Embed(source="../assets/fields/signature.png")]
        [Bindable]
        public var source:Class;

        override public function set inSelection(value:Boolean):void {
            _inSelection = value;
            if (_inSelection) {
                select();
            }
            else {
                unselect();
            }
        }

        override public function set showWarning(value:Boolean):void {
            _showWarning = value;
            warning.visible = _showWarning;
        }

        private function init():void {
            img.graphics.beginFill(0x79C6FE);
            img.graphics.drawRect(0, 0, this.width, this.height);
            img.graphics.endFill();
            logo.width = 35;
            logo.height = 35;
            if(isNative) { logo.filters = [getColorFilter()];}
            bg.width = this.width;
            bg.height = this.height;

            drawBorder();
            this.inSelection = _inSelection;
            if (!this.inSelection || FieldsManager.getSelectedFields().length < 2) {
                addContextMenu();
            }

            this.name = fieldData["sigId"];
            fieldId = fieldData["sigId"];
            fText.text = fieldData["role"];

            if (mainApp.fieldInfoTip.show) {
                var str:String = "";
                switch (mainApp.fieldInfoTip.infoType.toString()) {
                    case "ID":
                        str = fieldData["id"];
                        break;
                    case "Name":
                        str = "";
                        break;
                    case "Value":
                        str = "";
                        break;
                    case "Role":
                        str = fieldData["role"];
                        break;
                }
                tipText.text = str;
                tipText.validateNow();
                var textWidth:int = tipText.textWidth;
                tipBox.width = textWidth + 8;
                tipBox.x = this.width;
            }
        }

        private function drawBorder():void {
            var w:int = this.width;
            var h:int = this.height;
            frame.graphics.lineStyle(1, 0xD4D0C8, 1.0, false, "normal", CapsStyle.SQUARE, JointStyle.MITER);
            frame.graphics.moveTo(w, 0);
            frame.graphics.lineTo(w, h);
            frame.graphics.lineTo(0, h);
            frame.graphics.lineStyle(1, 0x808080, 1.0, false, "normal", CapsStyle.SQUARE, JointStyle.MITER);
            frame.graphics.lineTo(0, 0);
            frame.graphics.lineTo(w, 0);
            frame.graphics.lineStyle(1, 0x373737, 1.0, false, "normal", CapsStyle.SQUARE, JointStyle.MITER);
            frame.graphics.moveTo(w, 1);
            frame.graphics.lineTo(1, 1);
            frame.graphics.lineTo(1, h);
        }

        override public function addContextMenu():void {
            const cm:ContextMenu = new ContextMenu();
            cm.hideBuiltInItems();

            const delSignature:ContextMenuItem = new ContextMenuItem("Delete Signature");
            if(isNative) { delSignature.enabled = false; }
            delSignature.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                Layer.deleteField(fieldId);
                Layer.drawLayer();
            });
            const editSignature:ContextMenuItem = new ContextMenuItem("Edit Signature");
            editSignature.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                launchSettingsDialog();
            });
            const copySignature:ContextMenuItem = new ContextMenuItem("Copy Signature");
            copySignature.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                FieldsManager.ctxCopyElement(e);
            });
            copySignature.separatorBefore = true;
            cm.customItems = [editSignature,delSignature,copySignature];

            cm.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuSelectHandler);
            this.contextMenu = cm;
        }

        override protected function launchSettingsDialog():void
        {
            if(!inSelection){ FieldsManager.unSelectAll(Field(this));}
            var editD:signatureSettings = signatureSettings(customPopUpManager.createPopUp(mainApp.docContainer, signatureSettings, true));
            editD.fieldData = fieldData;
            customPopUpManager.centerPopUp(editD);
            adjustDialogPosition(editD);
        }

        override protected function select():void {
            redFrame.graphics.clear();
            var w:int = this.width;
            var h:int = this.height;
            redFrame.graphics.lineStyle(1, 0xff0000, 1.0, false, "normal", CapsStyle.SQUARE, JointStyle.MITER);
            redFrame.graphics.moveTo(0, 0);
            redFrame.graphics.lineTo(w, 0);
            redFrame.graphics.lineTo(w, h);
            redFrame.graphics.lineTo(0, h);
            redFrame.graphics.lineTo(0, 0);
        }

        override protected function unselect():void {
            redFrame.graphics.clear();
        }
        ]]>
	</fx:Script>
	<mx:Box id="tipBox" borderColor="#cccccc" borderStyle="solid" borderVisible="true" backgroundColor="#fdfdcc" x="0" y="2" width="0" height="20" >
		<mx:Text id="tipText" color="#333333" selectable="false" x="2" height="20" />
	</mx:Box>
	<mx:Image id="img" width="200" height="36" />
	<mx:Image id="logo" source="{source}" />
	<mx:Text id="fText" selectable="false" width="160" height="29" x="40" y="5" />
	<mx:Image id="frame" />
	<mx:Image id="redFrame" />
	<mx:Image id="bg" source="{bg_source}" scaleContent="true" maintainAspectRatio="false" buttonMode="true" alpha="0"
			  mouseDown="fieldStartDrag(event);" mouseUp="this.stopDrag();"
              doubleClick="launchSettingsDialog()" doubleClickEnabled="true" />
	<mx:Image id="warning" name="warning" source="{img_warning}" x="-5" y="-5" width="15" height="15" scaleContent="true" visible="false"  />
</components:Field>
